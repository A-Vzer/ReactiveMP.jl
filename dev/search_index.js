var documenterSearchIndex = {"docs":
[{"location":"getting-started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting-started/","page":"Getting started","title":"Getting started","text":"ReactiveMP.jl is a Julia package for reactive message passing based Bayesian Inference on Factor Graphs. It supports both exact and variational inference.","category":"page"},{"location":"extending/#Extending-the-functionality","page":"Extending","title":"Extending the functionality","text":"","category":"section"},{"location":"extending/#Adding-a-new-type-of-node","page":"Extending","title":"Adding a new type of node","text":"","category":"section"},{"location":"extending/","page":"Extending","title":"Extending","text":"ReactiveMP.jl package exports the @node macro to create a simple factor node with fixed number of arguments.","category":"page"},{"location":"extending/","page":"Extending","title":"Extending","text":"@node macro accepts three arguments:","category":"page"},{"location":"extending/","page":"Extending","title":"Extending","text":"A functional form of the new node in form of a Julia type, e.g. Normal or typeof(+)\nA type of node: Stochastic or Deterministic\nA list of node arguments, e.g. [ out, mean, variance ]","category":"page"},{"location":"extending/","page":"Extending","title":"Extending","text":"note: Note\nBy convention a list of node arguments should start with out ","category":"page"},{"location":"extending/","page":"Extending","title":"Extending","text":"Examples:","category":"page"},{"location":"extending/","page":"Extending","title":"Extending","text":"@node GaussianMeanVariance Stochastic [ out, m, v ]\n@node typeof(+) Deterministic [ out, in1, in2 ]","category":"page"},{"location":"distributions/#Distributions","page":"Distributions","title":"Distributions","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"ReactiveMP.jl library uses probability distributions types from Distributions.jl package. It also provides a wider range of possible parametrisations for some probability distributions, e.g NormalMeanPrecision or MvNormalMeanPrecision which might be more efficient in some situations.","category":"page"},{"location":"distributions/#API","page":"Distributions","title":"API","text":"","category":"section"},{"location":"distributions/","page":"Distributions","title":"Distributions","text":"vague\nprod\nProdPreserveParametrisation\nProdBestSuitableParametrisation\ndefault_prod_strategy","category":"page"},{"location":"distributions/#ReactiveMP.vague","page":"Distributions","title":"ReactiveMP.vague","text":"vague(distribution_type, [ dims... ])\n\nvague function returns uninformative probability distribution of a given type and can be used to set an uninformative priors in a model.\n\n\n\n\n\n","category":"function"},{"location":"distributions/#Base.prod","page":"Distributions","title":"Base.prod","text":"prod(strategy, left, right)\n\nprod function is used to find a product of two probability distrubution over same variable (e.g. ùìù(x|Œº1, œÉ1) √ó ùìù(x|Œº2, œÉ2)). There are two strategies for prod function: ProdPreserveParametrisation and ProdBestSuitableParametrisation.\n\nExamples:\n\nusing ReactiveMP\n\nproduct = prod(ProdPreserveParametrisation(), NormalMeanVariance(-1.0, 1.0), NormalMeanVariance(1.0, 1.0))\n\nmean(product), var(product)\n\n# output\n(0.0, 0.5)\n\nSee also: default_prod_strategy, ProdPreserveParametrisation, ProdBestSuitableParametrisation\n\n\n\n\n\n","category":"function"},{"location":"distributions/#ReactiveMP.ProdPreserveParametrisation","page":"Distributions","title":"ReactiveMP.ProdPreserveParametrisation","text":"ProdPreserveParametrisation\n\nProdPreserveParametrisation is one of the strategies for prod function. This strategy assumes the same output factorisation (if possible). Should be used mostly to preserve distribution parametrisation across a model.\n\nSee also: prod, ProdBestSuitableParametrisation, ProdExpectationMaximisation\n\n\n\n\n\n","category":"type"},{"location":"distributions/#ReactiveMP.ProdBestSuitableParametrisation","page":"Distributions","title":"ReactiveMP.ProdBestSuitableParametrisation","text":"ProdBestSuitableParametrisation\n\nProdBestSuitableParametrisation is one of the strategies for prod function. This strategy does not make any assumptions about output factorisation. Can be used to speedup computations in some cases.\n\nSee also: prod, ProdPreserveParametrisation, ProdExpectationMaximisation\n\n\n\n\n\n","category":"type"},{"location":"#ReactiveMP.jl-Documentation","page":"Home","title":"ReactiveMP.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for ReactiveMP.jl.","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n  \"getting-started.md\",\n  \"extending.md\",\n  \"distributions.md\"\n]\nDepth = 2","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"api/node/#node_api","page":"Node","title":"Node API","text":"","category":"section"},{"location":"api/node/","page":"Node","title":"Node","text":"Deterministic\nStochastic\nisdeterministic\nisstochastic\nsdtype\nMeanField\nFullFactorisation\ncollect_factorisation\nNodeInterface\nIndexedNodeInterface\nname\ntag\nmessageout\nmessagein","category":"page"},{"location":"api/node/#ReactiveMP.Deterministic","page":"Node","title":"ReactiveMP.Deterministic","text":"Deterministic\n\nDeterministic object used to parametrize factor node object with determinstic type of relationship between variables.\n\nSee also: Stochastic, isdeterministic, isstochastic\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.Stochastic","page":"Node","title":"ReactiveMP.Stochastic","text":"Stochastic\n\nStochastic object used to parametrize factor node object with stochastic type of relationship between variables.\n\nSee also: Deterministic, isdeterministic, isstochastic\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.isdeterministic","page":"Node","title":"ReactiveMP.isdeterministic","text":"isdeterministic(node)\n\nFunction used to check if factor node object is deterministic or not. Returns true or false.\n\nSee also: Deterministic, Stochastic, isstochastic\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.isstochastic","page":"Node","title":"ReactiveMP.isstochastic","text":"isstochastic(node)\n\nFunction used to check if factor node object is stochastic or not. Returns true or false.\n\nSee also: Deterministic, Stochastic, isdeterministic\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.sdtype","page":"Node","title":"ReactiveMP.sdtype","text":"sdtype(object)\n\nReturns either Deterministic or Stochastic for a given object (if defined).\n\nSee also: Deterministic, Stochastic, isdeterministic, isstochastic\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.MeanField","page":"Node","title":"ReactiveMP.MeanField","text":"MeanField\n\nGeneric factorisation constraint used to specify a mean-field factorisation for recognition distribution q.\n\nSee also: FullFactorisation\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.FullFactorisation","page":"Node","title":"ReactiveMP.FullFactorisation","text":"FullFactorisation\n\nGeneric factorisation constraint used to specify a full factorisation for recognition distribution q.\n\nSee also: MeanField\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.collect_factorisation","page":"Node","title":"ReactiveMP.collect_factorisation","text":"collect_factorisation(nodetype, factorisation)\n\nThis function converts given factorisation to a correct internal factorisation representation for a given node. \n\nSee also: MeanField, FullFactorisation\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.NodeInterface","page":"Node","title":"ReactiveMP.NodeInterface","text":"NodeInterface\n\nNodeInterface object represents a single node-variable connection.\n\nSee also: name, tag, messageout, messagein\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.IndexedNodeInterface","page":"Node","title":"ReactiveMP.IndexedNodeInterface","text":"IndexedNodeInterface\n\nIndexedNodeInterface object represents a repetative node-variable connection.  Used in cases when node may connect different number of random variables with the same name, e.g. means and precisions of Gaussian Mixture node.\n\nSee also: name, tag, messageout, messagein\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.name","page":"Node","title":"ReactiveMP.name","text":"name(interface)\n\nReturns a name of the interface.\n\nSee also: NodeInterface, tag\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.tag","page":"Node","title":"ReactiveMP.tag","text":"tag(interface)\n\nReturns a tag of the interface in the form of Val{ name(interface) }.  The major difference between tag and name is that it is possible to dispath on interface's tag in message computation rule.\n\nSee also: NodeInterface, name\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.messageout","page":"Node","title":"ReactiveMP.messageout","text":"messageout(interface)\n\nReturns an outbound messages stream from the given interface.\n\nSee also: NodeInterface, messagein\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.messagein","page":"Node","title":"ReactiveMP.messagein","text":"messagein(interface)\n\nReturns an inbound messages stream from the given interface.\n\nSee also: NodeInterface, messageout\n\n\n\n\n\n","category":"function"},{"location":"api/node/","page":"Node","title":"Node","text":"Internal API","category":"page"},{"location":"api/node/","page":"Node","title":"Node","text":"ReactiveMP.connectvariable!\nReactiveMP.connectedvar\nReactiveMP.connectedvarindex\nReactiveMP.inbound_portal\nReactiveMP.FactorNodeLocalMarginal\nReactiveMP.FactorNodeLocalMarginals","category":"page"},{"location":"api/node/#ReactiveMP.connectvariable!","page":"Node","title":"ReactiveMP.connectvariable!","text":"connectvariable!(interface, variable, index)\n\nConnects a variable with the interface and given index. Index is used to distinguish this connection from others in case if variable is connected to multiple interfaces.\n\nSee also: NodeInterface, connectedvar, connectedvarindex\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.connectedvar","page":"Node","title":"ReactiveMP.connectedvar","text":"connectedvar(interface)\n\nReturns connected variable for the interface.\n\nSee also: NodeInterface, connectvariable!, connectedvarindex\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.connectedvarindex","page":"Node","title":"ReactiveMP.connectedvarindex","text":"connectedvarindex(interface)\n\nReturns an index of connected variable for the interface.\n\nSee also: NodeInterface, connectvariable!, connectedvar\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.inbound_portal","page":"Node","title":"ReactiveMP.inbound_portal","text":"inbound_portal(interface)\n\nReturns an instance of inbound portal of connected variable for the interface\n\nSee also: [`NodeInterface`](@ref), [`connectvariable!`](@ref), [`connectedvar`](@ref)\n\n\n\n\n\n","category":"function"},{"location":"api/node/#ReactiveMP.FactorNodeLocalMarginal","page":"Node","title":"ReactiveMP.FactorNodeLocalMarginal","text":"FactorNodeLocalMarginal\n\nFields\n\nname  :: Symbol - name of local marginal, e.g. Œº. Name is _ separated in case of joint, eg. Œº_œÑ\nprops :: FactorNodeLocalMarginalProps - mutable object which is holding a stream of marginals or nothing\n\nThis object represents local marginals for some specific factor node.  Local marginal can be joint in case of structured factorisation.  Local to factor node marginal also can be shared with a corresponding marginal of some random variable.\n\nSee also: FactorNodeLocalMarginals\n\n\n\n\n\n","category":"type"},{"location":"api/node/#ReactiveMP.FactorNodeLocalMarginals","page":"Node","title":"ReactiveMP.FactorNodeLocalMarginals","text":"FactorNodeLocalMarginals\n\nThis object acts as an iterable and indexable proxy for local marginals for some node. \n\n\n\n\n\n","category":"type"}]
}
